import random
import os
import matplotlib.pyplot as plt
import numpy as np
import argparse

def generate_sparse_matrix(rows, cols, sparsity):
    """
    Generate a sparse matrix with given dimensions and sparsity.

    Args:
        rows (int): Number of rows in the matrix.
        cols (int): Number of columns in the matrix.
        sparsity (float): Fraction of elements that are zero (0.0 to 1.0).

    Returns:
        list: List of tuples representing non-zero elements in the format (row, col, value).
    """
    if not (0.0 <= sparsity <= 1.0):
        raise ValueError("Sparsity must be between 0.0 and 1.0")

    total_elements = rows * cols
    non_zero_elements = int(total_elements * (1 - sparsity))

    matrix = set()
    while len(matrix) < non_zero_elements:
        row = random.randint(1, rows)  # Matrix Market format uses 1-based indexing
        col = random.randint(1, cols)
        value = random.uniform(0.000001, 1.1)  # Random float values between -10 and 10
        matrix.add((row, col, value))

    return sorted(matrix, key=lambda x: (x[0], x[1]))

def write_block_row_to_mtx(f, num_rows, num_cols, num_nnz, matrix_entries, is_first_write):
    """
    Write a block row of matrix entries to an open MTX file.

    Args:
        f: Open file handle
        matrix_entries (list): List of (row, col, value) tuples to write
        is_first_write (bool): True if this is the first write to the file
    """
    if is_first_write:
        # Write Matrix Market banner
        f.write("%%MatrixMarket matrix coordinate real general\n")
        f.write("% Generated by sparse matrix generator\n")
        f.write(f"{num_rows} {num_cols} {num_nnz}\n")

    # Write sorted entries
    for row, col, value in sorted(matrix_entries, key=lambda x: (x[0], x[1])):
        f.write(f"{row} {col} {value}\n")

def generate_sparse_matrix_with_blocks(rows, cols, x_per_block, output_file):
    """
    Generate a sparse matrix with a fixed number of non-zeros per 4x4 sub-block,
    writing incrementally to file.

    Args:
        rows (int): Number of rows in the matrix.
        cols (int): Number of columns in the matrix.
        x_per_block (int): Number of non-zero elements per 4x4 block.
        output_file (str): Path to output MTX file.

    Returns:
        int: Total number of non-zero entries written
    """
    if x_per_block > 16:
        raise ValueError("Each 4x4 block can have at most 16 non-zero elements.")

    block_pos_set = [(i, j) for i in range(0, 4) for j in range(0, 4)]
    end_nnz = x_per_block * (rows // 4) * (cols // 4)
    total_nnz = 0

    with open(output_file, 'w') as f:
        for block_row in range(0, rows, 4):
            print(f"Processing block row {block_row} of {rows}")
            block_row_entries = []

            for block_col in range(0, cols, 4):
                local_nz_pos = random.sample(block_pos_set, x_per_block)
                for local_row, local_col in local_nz_pos:
                    global_row = block_row + local_row + 1  # Convert to 1-based index
                    global_col = block_col + local_col + 1  # Convert to 1-based index
                    value = random.uniform(1.000001, 1.1)
                    block_row_entries.append((global_row, global_col, value))

            # Write this block row's entries
            write_block_row_to_mtx(f, rows, cols, end_nnz, block_row_entries, block_row == 0)
            total_nnz += len(block_row_entries)

    # Update the header with correct dimensions and nnz count
    # with open(output_file, 'r') as f:
    #     lines = f.readlines()
    # lines[2] = f"{rows} {cols} {total_nnz}\n"
    # with open(output_file, 'w') as f:
    #     f.writelines(lines)

    return total_nnz

def write_matrix_to_mtx(file_path, rows, cols, matrix):
    """
    Write the sparse matrix to a file in Matrix Market format.

    Args:
        file_path (str): Path to the output .mtx file.
        rows (int): Number of rows in the matrix.
        cols (int): Number of columns in the matrix.
        matrix (list): List of tuples representing non-zero elements.
    """
    with open(file_path, 'w') as f:
        # Write Matrix Market banner
        f.write("%%MatrixMarket matrix coordinate real general\n")
        f.write("% Generated by sparse matrix generator\n")

        # Write matrix dimensions and number of non-zero entries
        f.write(f"{rows} {cols} {len(matrix)}\n")

        # Write matrix entries
        for row, col, value in matrix:
            f.write(f"{row} {col} {value}\n")

def load_and_visualize_matrix(file_path):
    """
    Load a sparse matrix from a Matrix Market file and visualize it.

    Args:
        file_path (str): Path to the .mtx file.
    """
    with open(file_path, 'r') as f:
        lines = f.readlines()

    # Skip comments and header
    data_lines = [line for line in lines if not line.startswith("%")]

    # Read matrix dimensions
    rows, cols, _ = map(int, data_lines[0].split())

    # Read matrix entries
    matrix = np.zeros((rows, cols))
    for line in data_lines[1:]:
        row, col, value = line.split()
        matrix[int(row) - 1, int(col) - 1] = float(value)

    # Visualize the matrix
    plt.figure(figsize=(8, 8))
    plt.spy(matrix, precision=0.1, markersize=5)
    plt.title("Sparse Matrix Visualization")
    plt.savefig("sparse_matrix_spy.png")

def main():
    # Set up argument parser
    parser = argparse.ArgumentParser(description='Generate a sparse matrix with specified block structure')
    parser.add_argument('rows', type=int, help='Number of rows (must be divisible by 4)')
    parser.add_argument('cols', type=int, help='Number of columns (must be divisible by 4)')
    parser.add_argument('x_per_block', type=int, help='Number of non-zeros per 4x4 block (0-16)')

    args = parser.parse_args()

    # Validate inputs
    if args.rows % 4 != 0:
        print("Error: Rows must be divisible by 4")
        return
    if args.cols % 4 != 0:
        print("Error: Columns must be divisible by 4")
        return

    # Specify output file path
    output_file = f"/work/hdd/bdiy/mhawkins/sparse_efficiency/sparse_matrices/diy_nnz_per_4x4/sparse_matrix_rows_{args.rows}_cols_{args.cols}_nnz_per_4x4_{args.x_per_block}.mtx"

    # Generate matrix and write directly to file
    total_nnz = generate_sparse_matrix_with_blocks(args.rows, args.cols, args.x_per_block, output_file)
    print(f"Sparse matrix with {total_nnz} non-zeros written to {output_file}")

if __name__ == "__main__":
    main()
